---
description: A specification for adding readable meaning to commit messages
globs:
alwaysApply: false
---

## Summary

The commit message should be structured as follows:

```
<type>: <description>
```

The commit contains the following structural elements:

1. **feat**: a commit of the _type_ `feat` introduces a new feature to the codebase.
2. **fix**: a commit of the _type_ `fix` patches a bug in your codebase.
3. **refactor**: a commit of the _type_ `refactor` changes code without fixing bugs or adding features.
4. **chore**: a commit of the _type_ `chore` covers routine tasks such as updating dependencies, adding tests, cleaning useless code, etc.

## Examples

### Commit message with description

```
feat: allow provided config object to extend other configs
```

## Specification

The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.

1. Commits MUST be prefixed with a type, which consists of a noun, `feat`, `fix`, etc. and REQUIRED terminal colon and space.
2. The type `feat` MUST be used when a commit adds a new feature.
3. The type `fix` MUST be used when a commit represents a bug fix for your application.
4. A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., _fix: array parsing issue when multiple spaces were contained in string_.
5. Types other than `feat` and `fix` MAY be used in your commit messages, e.g., _refactor: improve code readability_.
